# Appveyor configuration template for Rust
# https://github.com/starkat99/appveyor-rust

## Operating System (VM environment) ##

# Rust needs at least Visual Studio 2013 Appveyor OS for MSVC targets.
os: Visual Studio 2015

## Build Matrix ##

# This configuration will setup a build for each channel & target combination (12 windows
# combinations in all).
#
# There are 3 channels: stable, beta, and nightly.
#
# Alternatively, the full version may be specified for the channel to build using that specific
# version (e.g. channel: 1.5.0)
#
# The values for target are the set of windows Rust build targets. Each value is of the form
#
# ARCH-pc-windows-TOOLCHAIN
#
# Where ARCH is the target architecture, either x86_64 or i686, and TOOLCHAIN is the linker
# toolchain to use, either msvc or gnu. See https://www.rust-lang.org/downloads.html#win-foot for
# a description of the toolchain differences.
#
# Comment out channel/target combos you do not wish to build in CI.
environment:
  aws_id:
    secure: Y7Y8RtcP7vFH/IFMO+zsouVOwOijq2NxmUhSz+dnEHU=
  aws_key: 
    secure: Vp0uxHxQJVBJvpiE5N+uRI5kFLdGfiUrc7W8BtT8sJrtzC8wtRxE7vRJlT02R5Q5
  payload:
    secure: vhhT2Vk2L6FD6ARS0mXVJGYbh86AHB+ZhRFmwfud13pLE07LTS0vHCXlpyhf3NGb7hnqgbWReA2Bro7GI2thBID1AXjP1xfoINMCulXxKZNXycTBcZz08Q/+/3als+ocSwUs2OAGZyb1lEA9D+mYtfaQTiTgMGffJ150dDSZFFN0BfU2gJuuzYgFS41YllZUpk9JY87A3FfM/KYY73qrPt+r0zQT8TxlwW6xpQaLyk1q6xLLrFYM9Izvn8QAVhJfIxXVzNnjSpWdLTILD40VyYypvhLEYkYPhN2RLuwHDZiCONQFUHz9xgsvhYhzXffFfRNeJcL4SJaMyCOP0qFI1FSY2IVFZ0gL3h02IbQ9GgfnhDNCHM4foWtQqYjCc9cAVjdmWh8FYyH/7T/+d52RTXcfBlBa1iNWKe4aJCv2Iqg6M1Uuv4syQpqzmLqncbe4lIIdubjfNK61fOcwEEvy0A+WWr+r+bQgkP7nuViGucZnnLqq4axNJVGIYU97I4S/OCVnk5nBCu0uO7fY6oK/m+b/gr5Dh7j0aZF0CCFgolI=
  matrix:

### MSVC Toolchains ###

  # Stable 64-bit MSVC
    - channel: stable
      target: x86_64-pc-windows-msvc
  # Stable 32-bit MSVC
  #  - channel: stable
  #    target: i686-pc-windows-msvc
  # Beta 64-bit MSVC
  #  - channel: beta
  #    target: x86_64-pc-windows-msvc
  # Beta 32-bit MSVC
  #  - channel: beta
  #    target: i686-pc-windows-msvc
  # Nightly 64-bit MSVC
  #  - channel: nightly
  #    target: x86_64-pc-windows-msvc
  # Nightly 32-bit MSVC
  #  - channel: nightly
  #    target: i686-pc-windows-msvc

### GNU Toolchains ###

  # Stable 64-bit GNU
  #  - channel: stable
  #    target: x86_64-pc-windows-gnu
  # Stable 32-bit GNU
  #  - channel: stable
  #    target: i686-pc-windows-gnu
  # Beta 64-bit GNU
  #  - channel: beta
  #    target: x86_64-pc-windows-gnu
  # Beta 32-bit GNU
  #  - channel: beta
  #    target: i686-pc-windows-gnu
  # Nightly 64-bit GNU
  #  - channel: nightly
  #    target: x86_64-pc-windows-gnu
  # Nightly 32-bit GNU
  #  - channel: nightly
  #    target: i686-pc-windows-gnu

### Allowed failures ###

# See Appveyor documentation for specific details. In short, place any channel or targets you wish
# to allow build failures on (usually nightly at least is a wise choice). This will prevent a build
# or test failure in the matching channels/targets from failing the entire build.
#matrix:
#  allow_failures:
#    - channel: nightly

# If you only care about stable channel build failures, uncomment the following line:
    #- channel: beta

# 32-bit MSVC isn't stablized yet, so you may optionally allow failures there (uncomment line):
    #- target: i686-pc-windows-msvc

## Install Script ##

# This is the most important part of the Appveyor configuration. This installs the version of Rust
# specified by the 'channel' and 'target' environment variables from the build matrix. By default,
# Rust will be installed to C:\Rust for easy usage, but this path can be overridden by setting the
# RUST_INSTALL_DIR environment variable. The URL to download rust distributions defaults to
# https://static.rust-lang.org/dist/ but can overridden by setting the RUST_DOWNLOAD_URL environment
# variable.
#
# For simple configurations, instead of using the build matrix, you can override the channel and
# target environment variables with the -channel and -target script arguments.
#
# If no channel or target arguments or environment variables are specified, will default to stable
# channel and x86_64-pc-windows-msvc target.
#
# The file appveyor_rust_install.ps1 must exist in the root directory of the repository.
install:
- ps: .\appveyor_rust_install.ps1

# Alternative install command for simple configurations without build matrix (uncomment line and
# comment above line):
#- ps: .\appveyor_rust_install.ps1 -channel stable -target x86_64-pc-windows-msvc

## Build Script ##

# 'cargo test' takes care of building for us, so disable Appveyor's build stage. This prevents
# the "directory does not contain a project or solution file" error.
build: false

# Uses 'cargo test' to run tests. Alternatively, the project may call compiled programs directly or
# perform other testing commands. Rust will automatically be placed in the PATH environment
# variable.
test_script:
  - cmd: cargo test --verbose

after_test:
    # Install AWS client for PS.
 # - cmd: choco install awstools.powershell
    # Do some AWS stuff.
 # - ps: >-
  #    Set-AWSCredentials -AccessKey $env:aws_id -SecretKey $env:aws_key -StoreAs default;
   #   Get-AWSCredentials -ListStoredCredentials;
    #  $instid = New-EC2Instance -Region eu-west-1 -ImageId ami-f6ef7185 -MinCount 1 -MaxCount 1 -KeyName Default -InstanceType t2.micro -UserData $env:payload | Select-Object -ExpandProperty instances;
     # $env:instid = $instid[0].instanceid;
    #  Exit 1;
    #  Get-EC2Instance -Region eu-west-1;
    # Loop through each Windows OS version spinning up an instance.
    # Ensure userdata parameter is sent with a base64 encoded PS command to install deploy agent.
    # Wait for an instance to spin up etc.
#  - ps: >-
#      "Waiting for EC2 instance...";
#      Start-Sleep -s 240;
#      "Done!";
    # Run our tests.
  - cmd: cargo build --release # build release
  - cmd: 7z a wol.zip target\release\wol.exe

artifacts:
  #- path: 'target\release\wol.exe'
  - path: wol.zip
    name: wol

before_deploy:
    # Install AWS client for PS.
  - cmd: choco install awstools.powershell
    # Do some AWS stuff.
  - ps: >-
      Set-AWSCredentials -AccessKey $env:aws_id -SecretKey $env:aws_key -StoreAs default;
      Get-AWSCredentials -ListStoredCredentials;
      $instid = New-EC2Instance -Region eu-west-1 -ImageId ami-f6ef7185 -MinCount 1 -MaxCount 1 -KeyName Default -InstanceType t2.micro -UserData $env:payload | Select-Object -ExpandProperty instances;
      $env:instid = $instid[0].instanceid;
    # Wait for an instance to spin up etc.
  - ps: >-
      "Waiting for EC2 instance...";
      Start-Sleep -s 240;
      "Done!";
    # Run our tests.
  - cmd: cargo build --release # build release
  - cmd: 7z a wol.zip target\release\wol.exe

deploy:
  - provider: Environment
    name: Ec2
    on: 
      branch: master
  #provider: S3
  #access_key_id: 
  #  secure: Wy0XaYXX5CP2vmdJeIDIX8yRdYF1eB8NXHy3z+BOjfw=
  #secret_access_key: 
  #  secure: ZIAE9WYUQ5NfG+NL/PyD2MHrOFfn7+e9Keeg2shC06pbe43HTplb5h8Idielfn01
  #bucket: wolrst
  #set_public: false
  #artifact: wol
  #on:
  #  branch: release # Only deploy on release

after_deploy:
  - ps: >-
      Import-Module "C:\Program Files (x86)\AWS Tools\PowerShell\AWSPowerShell\AWSPowerShell.psd1";
      Echo "Pausing...";
      Start-Sleep -s 240;
      Remove-EC2Instance -Region eu-west-1 -Instance $env:instid;
