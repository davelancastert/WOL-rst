# Appveyor configuration template for Rust
# https://github.com/starkat99/appveyor-rust

# Sample appveyor.yml to deploy artifacts to EC2 instances.

# Rust needs at least Visual Studio 2013 Appveyor OS for MSVC targets.
os: Visual Studio 2015

# Setup some encrypted keys for AWS access etc.
environment:
  aws_id:
    secure: Y7Y8RtcP7vFH/IFMO+zsouVOwOijq2NxmUhSz+dnEHU=
  aws_key: 
    secure: Vp0uxHxQJVBJvpiE5N+uRI5kFLdGfiUrc7W8BtT8sJrtzC8wtRxE7vRJlT02R5Q5
  payload:
    secure: vhhT2Vk2L6FD6ARS0mXVJGYbh86AHB+ZhRFmwfud13pLE07LTS0vHCXlpyhf3NGb7hnqgbWReA2Bro7GI2thBID1AXjP1xfoINMCulXxKZNXycTBcZz08Q/+/3als+ocSwUs2OAGZyb1lEA9D+mYtfaQTiTgMGffJ150dDSZFFN0BfU2gJuuzYgFS41YllZUpk9JY87A3FfM/KYY73qrPt+r0zQT8TxlwW6xpQaLyk1q6xLLrFYM9Izvn8QAVhJfIxXVzNnjSpWdLTILD40VyYypvhLEYkYPhN2RLuwHDZiCONQFUHz9xgsvhYhzXffFfRNeJcL4SJaMyCOP0qFI1FSY2IVFZ0gL3h02IbQ9GgfnhDNCHM4foWtQqYjCc9cAVjdmWh8FYyH/7T/+d52RTXcfBlBa1iNWKe4aJCv2Iqg6M1Uuv4syQpqzmLqncbe4lIIdubjfNK61fOcwEEvy0A+WWr+r+bQgkP7nuViGucZnnLqq4axNJVGIYU97I4S/OCVnk5nBCu0uO7fY6oK/m+b/gr5Dh7j0aZF0CCFgolI=
  matrix:

### MSVC Toolchains ###

  # Stable 64-bit MSVC
    - channel: stable
      target: x86_64-pc-windows-msvc
  # Stable 32-bit MSVC
  #  - channel: stable
  #    target: i686-pc-windows-msvc
  # Beta 64-bit MSVC
  #  - channel: beta
  #    target: x86_64-pc-windows-msvc
  # Beta 32-bit MSVC
  #  - channel: beta
  #    target: i686-pc-windows-msvc
  # Nightly 64-bit MSVC
  #  - channel: nightly
  #    target: x86_64-pc-windows-msvc
  # Nightly 32-bit MSVC
  #  - channel: nightly
  #    target: i686-pc-windows-msvc

### GNU Toolchains ###

  # Stable 64-bit GNU
  #  - channel: stable
  #    target: x86_64-pc-windows-gnu
  # Stable 32-bit GNU
  #  - channel: stable
  #    target: i686-pc-windows-gnu
  # Beta 64-bit GNU
  #  - channel: beta
  #    target: x86_64-pc-windows-gnu
  # Beta 32-bit GNU
  #  - channel: beta
  #    target: i686-pc-windows-gnu
  # Nightly 64-bit GNU
  #  - channel: nightly
  #    target: x86_64-pc-windows-gnu
  # Nightly 32-bit GNU
  #  - channel: nightly
  #    target: i686-pc-windows-gnu

# allow failures on this channel.
#  allow_failures:
#    - channel: nightly

# Install the rust versions required by the matrix.
install:
- ps: .\appveyor_rust_install.ps1

## Build Script ##

# 'cargo test' takes care of building for us, so disable Appveyor's build stage. This prevents
# the "directory does not contain a project or solution file" error.
build: false

# Uses 'cargo test' to run tests. Alternatively, the project may call compiled programs directly or
# perform other testing commands. Rust will automatically be placed in the PATH environment
# variable.
test_script:
  - cmd: cargo test --verbose

after_test:
  - cmd: cargo build --release # build release
  - cmd: 7z a wol.zip target\release\wol.exe # zip it up

artifacts:
  # upload our archive as an artifact so it is available to deploy
  - path: wol.zip
    name: wol

before_deploy:
    # Install AWS client for PS.
  - cmd: choco install awstools.powershell
    # Set AWS credentials, send run instance request for each AMI we want and record the instance ID.
  - ps: >-
      $awsAmis = @("ami-f6ef7185", "ami-8fed73fc",  "ami-12e87661");
      $runningEc2 = New-Object System.Collections.ArrayList;

      Set-AWSCredentials -AccessKey $env:aws_id -SecretKey $env:aws_key -StoreAs default;

      Echo "Launching EC2 instances...";
      foreach ($ami in $awsAmis) {
          $instid = New-EC2Instance `
              -Region eu-west-1 `
              -ImageId $ami `
              -MinCount 1 `
              -MaxCount 1 `
              -KeyName Default `
              -InstanceType t2.micro `
              -UserData $env:payload | Select -Exp instances;
          $runningEc2.Add($instid[0].instanceid);
      };
    # Wait until total running instances with IDs matching those launched and status ok equals the number of instances launched.
  - ps: >-
      Echo "Waiting for all deployment instances to enter the running state...";
      $upSleep = 30;
      while ((Get-EC2InstanceStatus -Region eu-west-1 |
            Where { $_.InstanceId -In $runningEc2 } |
            Select -Exp Status |
            Select -Exp Status |
            Select -Exp Value |
            Group |
            Where { $_.Name -eq "ok" } |
            Select -Exp Count) -ne $runningEc2.Count) {
          Echo "Not all instances have completed spin up, sleeping for $upSleep...";
          Start-Sleep -s $upSleep;
      };
      Echo "Done!";

deploy:
    # Deploy using the Appveyor Agent installed on each EC2 instance.
  - provider: Environment
    name: Ec2
    on: 
      branch: master
  #- provider: Script
  #provider: S3
  #access_key_id: 
  #  secure: Wy0XaYXX5CP2vmdJeIDIX8yRdYF1eB8NXHy3z+BOjfw=
  #secret_access_key: 
  #  secure: ZIAE9WYUQ5NfG+NL/PyD2MHrOFfn7+e9Keeg2shC06pbe43HTplb5h8Idielfn01
  #bucket: wolrst
  #set_public: false
  #artifact: wol

# Cleanup our EC2 instances. Loop and sleep until they all disappear from instance status.
# Possibly wait and query REST API for deployment status.
after_deploy:
  - ps: >-
      Echo "Killing deployment instances...";
      $downSleep = 5;
      foreach ($running in $runningEc2) {
          Remove-EC2Instance -Region eu-west-1 -InstanceId $running -Force;
      };
      Echo "Waiting for all deployment instances to disappear...";
      while ((Get-EC2InstanceStatus -Region eu-west-1 |
            Where { $_.InstanceId -In $runningEc2 }) -ne $null) {
          Echo "Not all instances have been terminated, sleeping for $downSleep...";
          Start-Sleep -s $downSleep;
      };
      Echo "done!";
